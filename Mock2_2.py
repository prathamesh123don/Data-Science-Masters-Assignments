# -*- coding: utf-8 -*-
"""Mock2_2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Tc-kBtjHxOBp1OJijCUBp7RN5p7-0X7k

Sure, here is the decorator function called `timer` that measures the execution time of a function and prints the time taken by the decorated function to execute:
"""

import time


def timer(func):
  """
  A decorator function that measures the execution time of a function.

  Args:
    func: The function to be decorated.

  Returns:
    A decorated function that prints the time taken by the decorated function to execute.
  """

  def wrapper(*args, **kwargs):
    start_time = time.time()
    result = func(*args, **kwargs)
    end_time = time.time()
    print(f"The function {func.__name__} took {end_time - start_time} seconds to execute.")
    return result

  return wrapper


@timer
def factorial(n):
  """
  Calculates the factorial of a number.

  Args:
    n: The number to calculate the factorial of.

  Returns:
    The factorial of the number.
  """

  if n == 0:
    return 1
  else:
    return n * factorial(n - 1)


def main():
  print(factorial(5))


if __name__ == "__main__":
  main()

"""This decorator function uses the `time` module to calculate the execution time of the decorated function. The decorator function first gets the start time of the execution of the decorated function. Then, the decorated function is executed and the result is returned. Finally, the end time of the execution of the decorated function is obtained. The difference between the start time and the end time is then printed to the console.

To run the decorator function, you can save it as a Python file and then run it from the command line. For example, if you save the function as `timer.py`, you can run it by typing the following command into the command line:

```
python timer.py
```

This will print the time taken by the `factorial` function to execute.
"""
